s <- x$getsol()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsol(s)
s
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
nm <- makeCacheMatrix(m)
nm$get()
nm$getsol()
cacheSolve(nm)
cacheSolve(nm)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
get <- function() x
getsol <- function() s
set <- function(y) {
x <<- y
s <<- NULL
}
setsol <- function(solve) s <<- solve
list(get = get,
getsol = getsol,
set = set,
setsol = setsol)
}
a <- makeCacheMatrix(matrix(c(-1, -2, 1, 1), 2,2))
a
a
a$getsol
a$getsol()
cacheSolve <- function(x, ...) {
s <- x$getsol()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsol(s)
s
}
cacheSolve(a)
a$getsol()
a$setsol(5)
a$getsol()
cacheSolve(a)
column <- 23
}
else {
best <- function(state, outcome) {
## Read outcome data
setwd("//cvgfnp004/cincinnati/Home/MyDocs/DataScienceCert/R Programming")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##
## Check that state and outcome are valid
##    Check that the specified ailment is "heart attack", "heart failure", or "pneumonia"
if (tolower(outcome == "heart attack")) {
column <- 11
}
else if (tolower(outcome == "heart failure")) {
column <- 17
}
else if (tolower(outcome == "pneumonia")) {
column <- 23
}
else {
stop("invalid outcome")
}
##
##    Check that the specified state is valid
if (toupper(state) %in% data[, 7] == TRUE) {
}
else {
stop("invalid state")
}
##
## Return hospital name in that state with lowest 30-day death rate
##    Create a dataset with only data from the specified state and outcome,
##    Rename columns and change the Mortality rates column class to numeric
##    Remove rows with NA values
filtered <- data[data$State %in% state, c(2,column)]
colnames(filtered) <- c("Hospital", "Mortality")
filtered$Mortality <- suppressWarnings(as.numeric(filtered$Mortality))
filtered <- filtered[complete.cases(filtered),]
##    Find the row(s) with the lowest mortality rates, sort, and print only the first
name <- filtered$Hospital[filtered$Mortality == min(filtered$Mortality)]
name <- sort(name)
print(name[1])
}
best <- function(state, outcome) {
## Read outcome data
setwd("//cvgfnp004/cincinnati/Home/MyDocs/DataScienceCert/R Programming")
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
##
## Check that state and outcome are valid
##    Check that the specified ailment is "heart attack", "heart failure", or "pneumonia"
if (tolower(outcome == "heart attack")) {
column <- 11
con <- odbcConnect( "analytd.dev.gai.com", uid="EXTERNAL_DATA", pwd="OUTSIDE_INFO", believeNRows=FALSE)
librart(RODBC)
library(RODBC)
con <- odbcConnect( "analytd.dev.gai.com", uid="EXTERNAL_DATA", pwd="OUTSIDE_INFO", believeNRows=FALSE)
con
?odbcConnect
??odbcConnect
library(RODBC)
version
library(RODBC)
employee <- c('John Doe','Peter Gynn','Jolie Hope')
salary <- c(21000, 23400, 26800)
startdate <- as.Date(c('2010-11-1','2008-3-25','2007-3-14))
startdate <- as.Date(c('2010-11-1','2008-3-25','2007-3-14'))
employ.data <- data.frame(employee, salary, startdate)
employ.data
paste("employ.data",names(employ.data))
names(employ.data) <- paste("employ.data",names(employ.data))
employ.data
names(employ.data) <- paste("employ.data",names(employ.data), sep = "_")
employ.data
rm(employ.data)
library(dplyr)
library(ggplot2)
# Create connection to the database
Experian <- src_postgres('experian',
host = 'pa-dw-instance.cabjrekihne8.us-east-1.redshift.amazonaws.com',
port=5439,
user="abayes",
password = "Pass1234")
# List table names
# Create a table reference with tbl
a201601 <- tbl(Experian, "experian_crdb_jan16")
# Manipulate the reference as if it were the actual table
b201601 <- f201601 %>%
filter(intelliscore_plus_v2 < 999) %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2}) # %>%
#mutate(bin201601 = business_identification_number) %>%
#select(-business_identification_number)
# To see the SQL that dplyr will run.
#show_query(clean)
# Extract random 1% sample of data
c201601 <- clean %>%
mutate(x = random()) %>%
collapse() %>%
filter(x <= 0.001) %>%
select(-x) %>%
collect()
names(c201601) <- paste("c201601", names(c201601), sep = "_")
# Manipulate the reference as if it were the actual table
b201601 <- a201601 %>%
filter(intelliscore_plus_v2 < 999) %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2}) # %>%
#mutate(bin201601 = business_identification_number) %>%
#select(-business_identification_number)
# To see the SQL that dplyr will run.
#show_query(clean)
# Extract random 1% sample of data
c201601 <- b201601 %>%
mutate(x = random()) %>%
collapse() %>%
filter(x <= 0.001) %>%
select(-x) %>%
collect()
names(c201601) <- paste("c201601", names(c201601), sep = "_")
str(c201601)
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(intelliscore_plus_v2 < 999) %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2})
filter(business_identification_number %in% c201601$c201601_business_identification_number)
collect()
b201601 <- a201601 %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2}) # %>%
#mutate(bin201601 = business_identification_number) %>%
#select(-business_identification_number)
201601 <- b201601 %>%
mutate(x = random()) %>%
collapse() %>%
filter(x <= 0.001) %>%
select(-x) %>%
collect()
names(c201601) <- paste("c201601", names(c201601), sep = "_")
c201601 <- b201601 %>%
mutate(x = random()) %>%
collapse() %>%
filter(x <= 0.001) %>%
select(-x) %>%
collect()
names(c201601) <- paste("c201601", names(c201601), sep = "_")
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(business_identification_number %in% c201601$c201601_business_identification_number)
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(business_identification_number %in% c201601$c201601_business_identification_number) %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2})
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(business_identification_number %in% c201601$c201601_business_identification_number) %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2}) %>%
collect()
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(business_identification_number %in% c201601$c201601_business_identification_number) %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2})
Experian <- src_postgres('experian',
host = 'pa-dw-instance.cabjrekihne8.us-east-1.redshift.amazonaws.com',
port=5439,
user="abayes",
password = "Pass1234")
a201512 <- tbl(Experian, "experian_crdb_dec15")
show_query(a201512)
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(business_identification_number %in% c201601$c201601_business_identification_number)
show_query(a201512)
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(business_identification_number %in% c201601$c201601_business_identification_number) %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2})
show_query(a201512)
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(business_identification_number %in% c201601$c201601_business_identification_number) %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2}) %>%
collect()
show_query(a201512)
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(business_identification_number %in% "400001405") %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2}) %>%
collect()
Experian <- src_postgres('experian',
host = 'pa-dw-instance.cabjrekihne8.us-east-1.redshift.amazonaws.com',
port=5439,
user="abayes",
password = "Pass1234")
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(business_identification_number %in% "400001405") %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2}) %>%
collect()
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(business_identification_number %in% '400001405') %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2}) %>%
collect()
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(business_identification_number %in% as.character(400001405)) %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2}) %>%
collect()
show_query(a201512)
str(c201601)
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(business_identification_number %in% 400001405) %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2}) %>%
collect()
c201601 <- b201601 %>%
mutate(x = random()) %>%
collapse() %>%
filter(x <= 0.001) %>%
mutate(business_identification_number = as.character(business_identification_number)) %>%
select(-x) %>%
collect()
names(c201601) <- paste("c201601", names(c201601), sep = "_")
Experian <- src_postgres('experian',
host = 'pa-dw-instance.cabjrekihne8.us-east-1.redshift.amazonaws.com',
port=5439,
user="abayes",
password = "Pass1234")
a201601 <- tbl(Experian, "experian_crdb_jan16")
# Manipulate the reference as if it were the actual table
b201601 <- a201601 %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2}) # %>%
#mutate(bin201601 = business_identification_number) %>%
#select(-business_identification_number)
# To see the SQL that dplyr will run.
#show_query(a201512)
# Extract random 1% sample of data
c201601 <- b201601 %>%
mutate(x = random()) %>%
collapse() %>%
filter(x <= 0.001) %>%
mutate(business_identification_number = as.character(business_identification_number)) %>%
select(-x) %>%
collect()
names(c201601) <- paste("c201601", names(c201601), sep = "_")
str(c201601)
tail(str(c201601))
str(c201601$c201601_business_identification_number)
mutate(c201601, c201601_business_identification_number = as.character(c201601_business_identification_number))
c201601$c201601_business_identification_number = as.character(c201601$c201601_business_identification_number)
str(c201601)
a201512 <- tbl(Experian, "experian_crdb_dec15") %>%
filter(business_identification_number %in% c201601$c201601_business_identification_number) %>%
mutate(new_score = if(intelliscore_plus_v2 == 998) {-1} else {intelliscore_plus_v2}) %>%
collect()
?svd
svd1 <- svd(scale(c201601[,]))
names(c201601)
svd1 <- svd(scale(c201601[,43:77]))
head(c201601[,43:77])
str(c201601[,43:77])
svd1 <- svd(scale(c201601[,c(43:77,-70]))
svd1 <- svd(scale(c201601[,c(43:77,-70)]))
svd1 <- svd(scale(c201601[,43:69]))
class(c201601)
class(b201601)
maxContrib <- which.max(svd1$v[, 2])
maxContrib
svd1 <- svd(scale(c201601[,43:58]))
maxContrib <- which.max(svd1$v[, 2])
maxContrib
maxContrib <- which.max(svd1$v[, 2])
maxContrib
svd1 <- svd(scale(c201601[,43:59]))
maxContrib <- which.max(svd1$v[, 2])
maxContrib
setwd("S:/GAIC/Finance/Predictive Analytics/Data Practice/Experian/Anna R Experian Sample")
load("experian.Rda")
install.packages("knitr")
install.packages("rmarkdown")
summary(cars)
```{r, echo=FALSE}
```
plot(cars)
```{r}
plot(cars)
plot(cars)
plot(cars)
unzip(".activity.zip", exdir = "./activity")
getwd()
setwd("//cvgfnp004/cincinnati/Home/MyDocs/DataScienceCert/05-Reproducible Research/RepData_PeerAssessment1")
unzip(".activity.zip", exdir = "./activity")
unzip("./activity.zip", exdir = "./activity")
unzip("./activity.zip", exdir = "./data")
if (!file.exists("./data/data\activity.csv")) {
if (!file.exists("./data/data\activity.csv")) {
unzip("./activity.zip", exdir = "./data")
}
if (!file.exists("./data/data\activity.csv")) {
unzip("./activity.zip", exdir = "./data")
}
if (!file.exists("./data/activity.csv")) {
if (!file.exists("./data/activity.csv")) {
unzip("./activity.zip", exdir = "./data")
}
setwd("~/DataScienceCert/05-Reproducible Research/RepData_PeerAssessment1")
activity <- read.csv("./data/activity.csv")
head(activity)
tail(activity)
str(activity)
## If dplyr hasn't been installed, install it
if("dplyr" %in% rownames(installed.packages()) == F) {
install.packages("dplyr")
}
## Load the dplyr package
library(dplyr)
activity1 <- group_by(activity, date)
head(activity1)
activity1 <- group_by(activity, date) %>%
summarize(steps = sum(steps))
head(activity1)
histogram(activity1)
hist(activity1)
hist(activity1$steps)
library(ggplot2)
ggplot(activity1) +
geom_histogram()
ggplot(activity1, aes(x=steps)) +
geom_histogram()
ggplot(activity1, aes(x=steps), na.rm = T) +
geom_histogram()
ggplot(data = activity1, aes(x=steps)) +
geom_histogram()
ggplot(data = activity1, aes(x=steps)) +
geom_histogram(binwidth = 10)
ggplot(data = activity1, aes(x=steps)) +
geom_histogram(binwidth = 100)
ggplot(data = activity1, aes(x=steps)) +
geom_histogram(binwidth = 1000)
ggplot(data = activity1, aes(x=steps)) +
geom_histogram(binwidth = 2000)
ggplot(data = activity1, aes(x=steps)) +
geom_histogram(binwidth = 1000)
ggplot(data = activity1, aes(x=steps)) +
geom_histogram(binwidth = 2000)
is.na(activity1$steps)
sum(is.na(activity1$steps))
sum(!is.na(activity1$steps))
activity1 <- group_by(activity, date) %>%
summarize(steps = sum(steps, na.rm = TRUE))
ggplot(data = activity1, aes(x=steps)) +
geom_histogram(binwidth = 2000)
mean(activity1$steps)
## The mean
mean(activity1$steps)
## The median
median(activity1$steps)
activity_by_interval <- group_by(activity, interval) %>%
summarize(steps = mean(steps, na.rm = TRUE))
ggplot(data = activity_by_interval, aes(x = date, y = steps)) +
geom_line()
ggplot(data = activity_by_interval, aes(x = date, y = steps)) +
geom_line() +
scale_x_date(format = "%b-%Y")
head(activity_by_interval)
ggplot(data = activity_by_interval, aes(x = interval, y = steps)) +
geom_line()
max(activity_by_interval$steps)
which.max(activity_by_interval$steps)
activity_by_interval[104]
activity_by_interval[104,]
activity_by_interval[which.max(activity_by_interval$steps),]
activity_by_interval[which.max(activity_by_interval$steps),1]
sum(is.na(activity$steps))
activity_by_day <- group_by(activity, date) %>%
summarize(steps = sum(steps, na.rm = TRUE))
ggplot(data = activity_by_day, aes(x = date, y = steps)) +
geom_line()
activity_by_day <- group_by(activity, date) %>%
summarize(steps = sum(steps, na.rm = TRUE))
head(activity_by_day)
ggplot(data = activity_by_day, aes(x = date, y = steps)) +
geom_line()
impute <- function(interval) {activity_by_interval[interval,steps]}
return(steps)
impute <- function(interval) {activity_by_interval[interval,steps]}
return(activity$steps)
activity[["interval"]]
activity[["interval" = 805]]
activity_by_interval[["interval" = 805]]
activity_by_interval[["interval"]]
activity_by_interval[["interval"==805]]
activity_by_interval[[805]]
activity_by_interval[805]
activity_by_interval[805,]
activity_by_interval[1,]
activity_by_interval[2,]
activity_impute <- left_join(activity, activity_by_interval, by = "interval")
head(activity_impute)
activity_impute <- left_join(activity, activity_by_interval, by = "interval") %>%
mutate(steps = ifelse(is.na(steps.x), steps.y, steps.x))
head(activity_impute)
tail(activity_impute)
head?
?head
less(activity_impute)
head(activity_impute, n = 100)
activity_impute[1200]
activity_impute[1200,]
activity_impute[1300,]
head(activity)
activity_impute <- left_join(activity, activity_by_interval, by = "interval") %>%
mutate(steps = ifelse(is.na(steps.x), steps.y, steps.x)) %>%
select(steps, date, interval)
head(activity_impute)
?weekdays
weekdays(activity_by_day)
weekdays(activity_by_day$date)
weekdays(2012-10-01)
weekdays("2012-10-01")
weekdays()
weekdays
weekdays(as.Date("2012-10-01"))
weekdays(as.Date(activity_by_day$date))
weekdays(as.Date(activity_by_day$date), abbreviate = T)
weekdays(as.Date(activity_by_day$date), abbreviate = F)
activity_impute_weekday <- mutate(activity_impute, day_type <- weekdays(date))
activity_impute_weekday <- mutate(activity_impute, day_type <- weekdays(as.Date(date)))
head(activity_impute_weekday)
activity_impute_weekday <- mutate(activity_impute, weekday <- weekdays(as.Date(date), abbreviate = T))) %>%
mutate(day_type <- ifelse(weekday == 'Sun' | weekday == 'Sat',"weekend","weekday"))
activity_impute_weekday <- mutate(activity_impute, weekday <- weekdays(as.Date(date), abbreviate = T)))
activity_impute_weekday <- mutate(activity_impute, weekday <- weekdays(as.Date(date), abbreviate = T)) %>%
mutate(day_type <- ifelse(weekday == 'Sun' | weekday == 'Sat',"weekend","weekday"))
head(activity_impute_weekday)
activity_impute_weekday <- mutate(activity_impute, weekday = weekdays(as.Date(date), abbreviate = T)) %>%
mutate(day_type = ifelse(weekday == 'Sun' | weekday == 'Sat',"weekend","weekday"))
head(activity_impute_weekday)
str(activity_impute_weekday)
activity_impute_weekday <- mutate(activity_impute, weekday = weekdays(as.Date(date), abbreviate = T)) %>%
mutate(day_type = as.factor(ifelse(weekday == 'Sun' | weekday == 'Sat',"weekend","weekday")))
```
activity_impute_weekday <- mutate(activity_impute, weekday = weekdays(as.Date(date), abbreviate = T)) %>%
mutate(day_type = ifelse(weekday == 'Sun' | weekday == 'Sat',"weekend","weekday"))
activity_impute_weekday <- mutate(activity_impute, weekday = weekdays(as.Date(date), abbreviate = T)) %>%
mutate(day_type = ifelse(weekday == 'Sun' | weekday == 'Sat',"weekend","weekday")) %>%
select(steps, date, interval, as.factor(day_type))
activity_impute_weekday <- mutate(activity_impute, weekday = weekdays(as.Date(date), abbreviate = T)) %>%
mutate(day_type = factor(ifelse(weekday == 'Sun' | weekday == 'Sat',"weekend","weekday")))
str(activity_impute_weekday)
activity_impute_weekday <- mutate(activity_impute, weekday = weekdays(as.Date(date), abbreviate = T)) %>%
mutate(day_type = factor(ifelse(weekday == 'Sun' | weekday == 'Sat',"weekend","weekday"))) %>%
select(steps, date, interval, day_type)
str(activity_impute_weekday)
ggplot(activity_impute_weekday, aes(x = interval, y = steps)) +
geom_line() +
facet_grid(day_type~ .)
ggplot(activity_impute_weekday, aes(x = interval, y = mean(steps))) +
geom_line() +
facet_grid(day_type~ .)
activity_impute_weekday_by_interval <- group_by(activity_impute_weekday, interval) %>%
summarize(steps = mean(steps, na.rm = TRUE))
ggplot(activity_impute_weekday_by_interval, aes(x = interval, y = mean(steps))) +
geom_line() +
facet_grid(day_type~ .)
ggplot(activity_impute_weekday_by_interval, aes(x = interval, y = steps)) +
geom_line() +
facet_grid(day_type~ .)
activity_impute_weekday_by_interval <- group_by(activity_impute_weekday, interval) %>%
summarize(steps = mean(steps, na.rm = TRUE))
head(activity_impute_weekday_by_interval)
activity_impute_weekday_by_interval <- group_by(activity_impute_weekday, day_type, interval) %>%
summarize(steps = mean(steps, na.rm = TRUE))
head(activity_impute_weekday_by_interval)
ggplot(activity_impute_weekday_by_interval, aes(x = interval, y = steps)) +
geom_line() +
facet_grid(day_type~ .)
